HTML/CSS笔记

Html:

HTML超文本标记语言，html文档是纯文本文档，由纯文本和标记标签组成
	超文本：用纯字符中表示样式，图片，音视频，超链接等内容
	
html文档就是网页

单标记标签：不是修饰内容，而是现实某个功能
双标记标签：修饰内容的标记

标签可以嵌套不能交叉，标签不区分大小写，推荐小写（有个html版本要求全小写）

不同标签有不同属性，设置后浏览器显示的效果不一样
所有标签都具有四个属性
	id 指定唯一元素的标识
	style 为元素指定css样式
	class 指定元素所属类型
	title 指定标签弹出式提示语

<html> 声明一篇文档的开始和结束
<head> 表示文档的头部，显示区域之外的部分
<title> 表示文档的标题，显示在浏览器标题栏
<mate /> 定义网页的元数据
	元数据就是描述数据的数据
	http-equiv属性是http响应头的等价物，可以覆盖修改响应头的效果
		<meta http-equiv="content-type" content="text/html;charset=utf-8"/>
<body> 表示文档的主体，显示区域

<!doctype html>文档类型声明
	html有不同版本，不同版本可以使用的标签数量，可用属性，含义是不同的，还会影响到css和js的解释执行

上标：<sup></sup>
下标：<sub></sub>

显示标签或转义字符：<xmp></xmp>

相对路径：从本路径为准找资源
	当前目录下的abc目录 ./abc
	上级目录下的abc目录 ../abc
	上上级目录下的abc目录 ../../abc
绝对路径：完整的路径找资源，从域名开始 http://1.com/abc
新发现的一些知识
	写 abc 会寻找本路径下的abc目录
	写 abc.html 会寻找本路径下的abc文件
	写 /abc 会寻找网站根目录下的abc目录（文件同理）
	写 //abc.com 会跳转到 http://abc.com

图片热点：
	<img src="xxx.jpg" usemap="#img">
	<map name="img">
		<area shape="rect" coords="x,y,x1,y1"> //矩形，左上和右下
		<area shape="circle" coords="c,r"> //圆形，中心点和半径
		<area shape="poly" coords="x,y,x1,y1…"> //多边形，都是坐标点
	</map>

锚点链接：
	<div name="haha"></div>
	<a href="xxx.html#haha"></a>

隔20秒自动刷新：
	<meta http-equiv="refresh" content="20">
隔10秒跳转百度：
	<meta http-equiv="refresh" content="10" url="http://baidu.com">
	
在<head>中，加入<base target="_blank">可以使全页面所有链接打开方式为新窗口打开。

<a href="#" target="_self"></a>链接在本页面打开。

无序列表
<ul>
<li>123</li>
<li>123</li>
<li>123</li>
</ul>
ul可以加type属性（改变前面的标记），值是square变成方块，值是disc变成小圆圈，值是circle变成空心圆圈。

有序列表
<ol>
<li>123</li>
<li>123</li>
<li>123</li>
</ol>
ol可以加type属性（改变前面序列方式），值是1就用数字，值是a（A）就用字母，值是i（I）就用罗马字符。
start属性，值是3从3开始排序。
ol的start属性，规定了从几开始。
ol的reversed属性倒叙

自定义列表
<dl>
<dt></dt> // 小标题
<dd></dd> // 解释标题
</dl>

拼音注释：
<rudy></rudy> 标记定义注释或音标
<rt></rt> 标记定义对ruby的注释内容文本
<rp></rp> 告诉那些不支持ruby元素的浏览器如何显示
  你好，谢谢，<ruby>甭<rt>beng</rt></ruby>客气！
  你好，谢谢，<ruby>甭<rp>(</rp><rt>beng</rt><rp>)</rp></ruby>客气！

滚动元素
<marquee></marquee>

表格中的属性：
cellspacing 表示单元格和单元格之间的距离
cellpadding 表示边框的padding内边距

表格标题，直接写在table中
<caption>标题</caption>

表格标题 <tr><th></th></tr>

在td中加入colspan可以横向合并单元格
<td colspan="2">向右横向合并两个单元格</td>
在td中加入rowspan可以纵向合并单元格
<td rowspan="2">向下纵向合并连个单元格</td>
合并的顺序：先上后下，先左后右

表格边框 border="1"
表格边框颜色 bordercolor="red"
表格背景颜色 bgcolor="green"
表格中valign的属性 top middle bottom (水平的是 left center right)

<meta charset="utf-8"/>
文档编码为utf-8（charset 意思是字符设置）

禁止发送referrer链接来路
<meta content="never" name="referrer">
链接禁止发送referrer链接来路
<a href="test.php" rel="noreferrer">你好，哈哈哈</a>

<meta name="keywords" content="关键字">
<meta name="description" content="网页描述">
网页跳转（网页重定向）：
<meta http-equiv="refresh" content="5; http:www.baidu.com" >

表单：作用是搜集信息

表单域(表单区域)
写在<form>中
action 提交处理的页面
method 提交的方式（get通过地址栏提交信息，安全性差 post通过文件处理信息）
enctype 数据编码方式

表单控件
单行文本输入框:
<input type="text"/>
maxlength="6" 可以限定最大的长度
readonly="readonly" 设定只读，不能写入
disabled="disabled" 设定未激活状态
name="username" 给输入框起名字，方便PHP用
value="hello" 给输入框写入数据（默认值）
submit按钮可以设置多个name，上传的时候会提交被点击的那个submit的name

密码输入框：
<input type="password" placeholder='hahaha'>
属性和单行文本框一样

单选框：
<input type="radio">
要相同name属性值的才能单选
checked="checked" 设置默认选中项

设置文本框必填
<input type="text" required>

label标签：绑定一个元素，当点击label标签时，被绑定的元素会获得焦点
<label> 用户名:<input type=text /> </label>
<label for="标签id"></label> 被绑定的元素可以写到label外面

下拉列表：
<select>
<option>下拉列表的选项</option>
</select>
selected="selected" 设置默认选中项（在option中设置）
multiple="multiple" 设置多选（在select中设置）
下拉列表分组：
<select>
<optgroup label="谢谢">
<option>你好</option>
<option>我好</option>
<option>大家好</option>
</optgroup>
<optgroup label="Yeah">
<option>你好</option>
<option>我好</option>
<option>大家好</option>
</optgroup>
</select>

多选框：
<input type="checkbox">
checked="checked" 默认选中项

文本域：
<textarea></textarea>
cols 每行的字符数（比如30）
rows 显示的行数（比如10）
css样式：resize:none 禁止调整文本域大小

文件上传域：
<input type="file">
文件上传限制：
<input type="file" accept=".png,.jpg">

提交按钮：
<input type="submit">

普通按钮:
<input type="button">
value="点我开始" 可以给它默认的值

图片按钮：
<input type="image" src="1.jpg"> 有提交功能

重置按钮：
<input type="reset">

为表单分组：
<form>
<fieldset>
<legend>分组信息</legend>
<input type="text">
<input type="password">
</fieldset>
</form>

提交网址控件:
<input type="url">

日期控件：
<input type="date">
时间控件:
<input type="time">

邮件控件：
<input type="email">

数字控件：
<input type="number">
step="2" 设置步长

滑块控件：
<input type="range">
step="2" 设置步长

nofollow的用法：
a.<meta name="robots" content="nofollow">这句话在<head>中写，表示禁止整个页面的追踪
b.<a href="http://baidu.com" rel="nofollow">禁止单个链接的追踪

字体图标：
	icomoon.io
	iconfont.cn
通过icomoon下载的字体图标，可以获取css字体引入代码
可以使用before或after伪元素插入图标
div::after {
	content:"\e123";
}
	
CSS:
css页面引入其他样式表：
	@import url("a/b.css");
	@import "a/b.css";

width 设置元素的宽度，可以用px和百分比（按父元素为准缩放）
height 设置元素的高度，可以用px和百分比（按父元素为准缩放）
自适应父元素的宽度（自动填充剩余的空间）：
	width:-webkit-fill-available
自适应父元素的高度
	height:-webkit-fill-available
有些浏览器出的属性需要加前缀，等标准统一可以去掉
宽度自动根据内容来设置：
	width:fit-content;
按照内容最大的宽度设置：
	width:max-content;
按照内容最小的宽度设置：
	width:mim-content;

background-color:   背景颜色
background-image:url("路径")  背景图片
background-repeat:    背景图片的显示方式，默认值repeat（重复），不重复no-repeat，水平平铺repeat-x，垂直平铺reteat-y
background-position:控制背景图片显示的方位，有上（top）下（bottom）左（left）右（right）中（center），可以组合，比如右上（right top），中下（center bottom）等。也可以设置数值（20px 10px 表示左偏移20px上偏移10px）。
background-attachment:表示图片是否随滚动条滚动，默认值是scroll，如果改成fixed就不随滚动条滚动了
font-size定义字体大小
	samll large 关键字定义
	px单位定义
	100%百分比定义（按照继承字体的百分比）
	em单位，父元素字体大小的单位
	rem 根元素（html元素）字体大小的单位
font-weight定义字体的粗细
	normal默认值，定义标准字体
	bold 定义粗体
	bolder 定义更粗字体
	lighter 定义更细字体
	inherit 规定从父元素继承粗细
	100到900的数字 ： 定义由粗到细的字符。400等于normal，700等于bold
font-family:  字体样式，字体名有空格需要用引号包裹，多个字体名用逗号分隔
font–style:italic;  定义斜体
line-height:   文字的行高
	px单位定义
	em单位定义（按照继承字体或本元素字体大小的百分比）
font:italic 700 16px/1.5em "微软雅黑";
	倾斜 加粗 字号/行间距 字体
	font文本属性的连写（字号和字体必须有）
英文的大小写
	font-variant:small-caps; 小型大写
	text-transform:uppercase; 小写转大写
	text-transform:lowercase; 大写转小写
	text-transform:capitalize; 首字母大写
边框的属性：
	border-top:1px dashed green; 上边框线简写
	border-bottom ……
	border-style 设置四个边框的样式（实线solid  虚线dashed  点线dotted  双实线double）
	border-width 设置四个边框的宽度
	border-color 设置四个边框的颜色
	border-top-style
	border:1px solid red; 边框简写
圆角的属性：
	border–radius 画圆角矩形，可以有4个值，分别是左上，右上，右下，左下。和设置margin一样
表格合并边框：
	border-collapse:collapse; 合并表格的相邻边框
外边框轮廓线：
	绘制于元素周围的一条线，位于边框之外。不占空间位。
	outline-style:solid;
	outline-width:10px;
	outline-color:#ddd;
	outline:width style color; 简写
transparent（透明色，可以用于颜色值）
溢出属性（div中文字如果溢出会怎么样）overflow:auto(自动加滚动条)
opacity表示div的透明度，取值为0-1
Text-decoration：文本添加下划线，属性【underline 下划线  overline 上划线  line-through 删除线  blink 文本闪烁  none 无】
list–style:none;  去ul左边的点
list–style:url(1.jpg);  改点为图片

文本格式化：
	font-weight:normal,bold,lighter,400(normal)~900(bold)
	font-style:normal,italic
	font-variant:normal,small-caps （小型大写字母）
font的简写：
	font:style variant weight size family; 必须有family
文本排列方式：
	作用：指定当前元素中的文本，行内元素，行内块元素的水平对齐方式
	属性：text-align
	取值：left/center/right/justify (两端对齐)
文本修饰：
	作用：指定文本的线条样式
	属性：text-decoration
	取值：
		1.none 无
		2.underline 下划线
		3.overline 上划线
		3.line-through 删除线
行高：
	作用：指定元素中一行数据的高度。如果行高的高度高于文字高度本身，那么该文本将在行高的范围内呈现出垂直居中的显示效果
	使用场合：
		1.控制一行文本垂直居中对齐
		2.设置行间距
	属性：line-height
	不写单位就是文字的倍数
首行文本缩进：
	属性：text-indent
文本阴影：
	属性：text-shadow
	取值：h-shadow v-shadow blur color;
字间距：
	letter-spacing:10px;
单词间距：
	word-spacing:10px;
文字排版方式：
	writing-mode:horizontal-tb; 默认排版，横向从左到右
	writing-mode:vertical-lr; 竖排，从左到右
	writing-mode:vertical-rl; 竖排，从右到左

表格里面的属性：
cellspacing 单元格间距
cellpadding 单元格填充

HTML文档插入样式的三种方式：
	1. 行内样式(inline style)
		HTML元素中的style标签写样式信息
	2. 内联样式(internal style sheet)
		style元素中写样式信息
	3. 外联样式(external style sheet)
		通过link元素引入外部样式表
link元素属性(引入资源 增强页面效果)
	rel 当前文档与资源之间的关系
		1. 超链接 
		2.外联资源(浏览器预制的关键字 多个关键字用空格分隔)
			icon 图标
			stylesheet 样式表
	href 资源的目标地址
	type 资源的MIME类型
		可以不设置 浏览器不会加载不支持的资源类型
	media 资源生效的媒体设备
		值是媒体查询信息
 
选择器的优先级
标签选择器<类选择器<ID选择器<行内样式
单选择器<复合选择器<行内样式
 
一个标签定义两个类 <h1 class="a b"></h1>

CSS选择器：
CSS是做网页常用的，中文翻译为层叠样式表，做样式用。不仅可以控制标签，还能控制类（class）。
定义css：
在<head></head>中定义，格式为<style></style>，把css的内容写到这个标签里来。

选择器页面用法：
1. 控制标签
     直接调用标签加属性：
     a{
            font-size:10px;   /*表示带a标签的文字大小都为10像素*/
    } 
2.控制class
      在标签中加一个class，定义它的名字，然后就能控制它了，格式是class名前面加一个点 
      .abc{
                font-size:10px; /*表示有abc名字的标签文字都为10像素*/
     } 
3. 控制ID
      ID和class差不多，但是ID只能用一次，权限最大，格式是ID名前面加一个井号
      #abc{
                font-size:10px;  /*表示id为abc的标签文字都为10像素*/
      }
4.控制子class，子标签
       class，标签也可以嵌套，如果想控制里面的那个，加空格
       .abc .def{
                    font-size:10px;  /*表示abc里的def的标签文字都为10像素*/
        }
5.多class，标签控制
        如果多个class或标签需要控制，不用重写，只需要加个逗号就可以
        .abc,.def,.ghi{
                    font-size:10px;  /*表示class名为abc,def,ghi的标签文字都为10像素*/
        }
6.全局控制
        这个可以控制所有元素，最大的控制，格式是用星号表示所有
        *{
                font-size:10px;  /*不管哪里的文字都为10像素*/
          }
7.伪类选择器
           控制链接的属性
           a:hover{
                    color:red;  /*鼠标放上链接时眼神变为红色*/
           } 
8.子元素选择器
div>li{
       color:red;
}
表示div中的li标签，但是不包括孙子元素中的li
9.属性选择器
a[title]{
       color:red;
}
表示a标签里总有title属性的内容颜色都为红色
属性选择器可以多选属性 a[title="hehe"][class="haha"]{}

input[type=text]{
     color:red;
}
表示type属性等于text的值包括的内容颜色为红色

div[class^=font]{
    color:red;
}
表示div中class属性的值前面带有font就能被选中，颜色为红

div[class$=font]{
    color:red;
}
表示div中class属性的值后面带有font就能被选中，颜色为红

div[class*=font]{
    color:red;
}
表示div中class属性的值任意位置带有font就能被选中，颜色为红

属性选择器（所有的值都可以用单/双引号引起来）
	1. [attr] attr表示属性
	2. element[attr] 元素[属性]
	3. [attr1][attr2] 匹配既具备attr1属性也具备attr2属性的元素
		例子：p[id][class] 匹配页面中既有id属性又有calss属性的p元素
	4. [attr=value]
	5. [class~=value] 
		1.用在多类选择器中
		2.匹配calss属性值是以空格隔开的值列表，并且value是该值列表中的一个独立的值
	6. [attr^=value] ^=表示以…开始，作用是匹配atrr属性值以value作为开始的元素
	7. [attr*=value] *=包含…字符，包含value的元素
	8. [attr$=value] $=以…作为结束，包含以value字符作为结束的元素

10.交集选择器
div.main{}
div#main{}

11.相邻兄弟选择器
div+span{}
表示选择所有div挨着的第一个span元素

12.兄弟选择器
div~span{}
表示选择所有和div并列下面的span

兄弟选择器：
	特点：只能向后找，不能向前
	兄弟选择器-相邻兄弟选择器
		紧紧挨在一起的元素
		语法：选择器1 + 选择器2
	兄弟选择器-通用兄弟选择器
		后面所有的兄弟（相隔元素也没问题）
		语法：选择器1 ~ 选择器2

13.并集选择器
	selector1selector2
	如果选择器这样写（中间没有分隔），表示“而且”的意思

14.群组选择器
	a,b,c{}

伪类选择器
	伪类：匹配元素的不同状态，匹配到的是元素
	1.目标伪类
		:target
		突出显示活动的html锚元素（点击跳转到那个元素，html语法target="#a"，a是元素的id值）
	2.链接伪类
	a:link 默认
	a:hover 鼠标放上显示
	a:active 链接激活
	a:visited 访问后
	四个同时写的话，按顺序书写
	3.元素状态伪类
		匹配元素已启用，被禁用，被选中的状态
		主要用在表单控件上
		1. :enabled
			匹配没个没被禁用的元素
		2. :disabled
			匹配每个被禁用的元素
		3. :checked
			匹配每个被选中的元素（radio，checkbox）
    4.:focus 获取焦点
	4.结构伪类
		通过元素间的结构关系匹配
		1. :first-child
			匹配属于其父元素中的首个子元素
		2. :last-child
			匹配属于其父元素中最后一个子元素
		3. :nth-child(n)
			匹配属于其父元素中的第n个子元素
		4. :empty
			匹配没有子元素的元素
		5. :only-child
			匹配属于其父元素中的唯一子元素
		:first-child 选取属于其父元素的首个子元素
    :last-child 选取属于其父元素的最后一个子元素
    :nth-child(n) 匹配属于其父元素的第N个子元素，不论元素的类型 even偶数 odd奇数 可以直接写n(2n)，它是从0开始遍历的    
    :nth-last-child(n) 选择器匹配属于其元素的第N个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。n可以是数字、关键字或公式
    p:nth-of-type(n) 选择其父元素第几个同类型的元素
		p:nth-last-of-type(n) 选择其父元素倒数第几个同类型的元素
		:target 目标伪类选择器，用于选取当前活动的目标元素
		p:first-of-type 选取属于其父元素的首个符合类型的子元素
		p:last-of-type 选取属于其父元素的最后一个符合类型的子元素
		:only-child 唯一选择器，选择其父元素中唯一的元素（自己）
		p:only-of-type 选择符合类型的其父元素唯一的元素
		:empty 元素内容为空
	5.否定伪类
		将满足条件的选择器匹配的元素排除出去
		:not(选择器)
	6.表单伪类
		input:disabled 禁用的input文本框
		input:enabled 可以使用的input文本框
		input:required 选择必填文本框
		input:optional 选择非必填文本框
		input:valid 选择验证有效的表单
		input:invalid 选择验证无效的表单
伪元素选择器
	伪元素：匹配某个元素中的某部分内容
	1. :first-letter 或 ::first-letter
		匹配某元素的首字符
	2. :first-line 或 ::first-line
		匹配某元素首行字符
	3. ::selection
		匹配被用户选取的部分
内容生成伪元素（追加内容）
相当于加了一个标签，可以把它当做普通标签使用
	:before 或 ::before
		某元素内容区域之前插入内容
	:after 或 ::after
		匹配某元素内容之后
	content内容可以使用元素的属性
		content:attr(data-link);

解决的问题
	1.解决元素父元素高度问题
		.clear:after{ /*为父元素加*/
			content:"";
			display:block;
			clear:both;
		}
	2.外边距溢出
		div:before{
			content:"";
			display:table;
		}
内容生成的属性：content
取值：
	1.字符串（纯文本）
		使用的话，用""引起来
		content:"你好";
	2.图像
		content:url();
	3.计数器
		动态生成一组有序的数字插入到元素中
		1.属性 counter-reset
			声明/重置计数器
			语法
				counter-reset:名字 初始值;
				counter-reset:名1 值1 名2 值2;
			注意：初始值可以省略，默认0。不能放在使用的元素中声明，大部分情况下将计数器声明在使用元素的父元素上
		2.属性 counter-increment
			指定计数器每次出现的增量，每次出现计数器变化范围
			语法：
				counter-increment:名 增量;
				counter-increment:名1 增量1 名2 增量2;
			注意：增量值可以为正（增加），也可以为负（递减），默认增量为1。哪个元素使用计数器，在哪个元素设置计数器的增量
		3.使用计数器
			函数 - counter()
			在指定元素中，使用计数器的值，必须配合content属性一起使用。content要配合:before或:after一起使用
				例子
					div:before{
						content:counter(名);
					}
	4.特殊符号：用反斜线和Unicode编码可以设置特殊符号（/123）

: 与 :: 的区别
	1. :既能表示伪类选择器也能表示伪元素选择器（css2）
	2. ::在CSS3中表示伪元素选择器
	
CSS三大特性：
1.层叠性：当不同的样式作用到同一个（类）的标签时，样式发生了冲突，听后面的（后边代码层叠前面的）
2.继承性：发生的前提是包含（嵌套）关系【文字大小颜色字体粗细行高等某些样式都可以继承】，H系列不能继承文字大小，A系列不能继承文字颜色
3.优先级：默认样式（0）<标签选择器（1）<类选择器（10）<ID选择器（100）<行内样式表（1k+）<!important （优先级的特点：继承的权重为0，权重会叠加）

优先级：
默认样式最低
外链内联样式第二，谁离元素最近就用谁
样式不冲突，不会层叠
行内最高

各个选择器的权重位：
*(通配符)和继承的权重 0000 （通配符大于继承的权重，继承权重是null）
标签的权重 0001
类和伪类，属性选择器的权重 0010
id的权重 0100
行内样式的权重 1000
!important 的权重 无穷大

权重会叠加：
	div p {} 就是 1+1=2
	.one {} 就是 10
	10 > 2 所以使用类选择器中的样式
权重不会进位：0005 + 0005 = 00010

CSS盒子模型：
CSS盒子模型间距
 
.a{
      width:100px;
      height:100px;
      background-color:#eee;
      
      padding:20px;/*padding内边距，20px表示内容距离四个边边距为20px*/
 
      /* padding的各种值
           padding:10px;
           1.如果一个值，表示上下左右内边距都相同
           padding:10px 20px;
           2.如果两个值，第一个值表示上下，第二个值表示左右
           padding:10px 30px 20px;
           3.如果三个值，第一个值代表上，第二个值代表左右，第三个值表示下
           padding:10px 20px 30px 40px;
           4.如果四个值，第一个值上，第二个值右，第三个值下，第四个值左
 
            5.单独定义某一个内边距
                padding-left:100px;  左边距
                padding-right:200px; 右边距
                padding-top:300px; 上边距
                padding-bottom:200px; 下边距
       */
            
            margin:10px; /*外边距，用法和内边距一样*/
 
           /*
            使元素居中的设置：
            margin:0px auto; /*上下外间距为0，左右为自动*/
}

CSS背景图片的属性：
background-image:url(1.jpg);  /*默认是平铺小图像*/	 
/*控制图像的显示*/
background-repeat:no-repeat; /*控制不平铺*/
background-repeat:repeat-x; /*X轴的平铺*/
background-repeat:repeat-y; /*Y轴的平铺*/
background-repeat:space; /*平均分配，不会出现部分超出容器的情况*/

/*控制图像的位置*/
background-position:center bottom;/*控制图像在下方居中*/    
background-position:left top;/*控制图像在上方左侧*/
/*  方位名词有top（上）left（左）right（右）bottom（下）center（中）几个方位的组合   */
/*精准控制图像的位置*/
background-position:10px 20px;/*设置图像的X轴和Y轴，可以设置负值*/

background-attachment:fixed; /*固定图像不随页面滚动*/

/*上面这些东西都可以简写*/
background:#000 url(1.jpg) no-repeat fixed left top;/*后面的属性覆盖前面的属性*/
背景图片大小的设置
background-size: 100px 200px; 两个参数，宽度和高度（可以用百分比，100%是图片原本大小）
background-size:cover; 表示自动适应盒子的宽度或高度，溢出的隐藏
background-size:contain; 表示在盒子的范围内缩放，保证全部显示在盒子中
background-size:100px; 表示宽度100px高度自适应（也可以写auto）

背景图片可以加多个：
	background:url() left top,url() right bottom;
也可以这么用：
	background-image:url(), url();
	background-position:left center, right;
	每一个都对应着相应的背景图片，如果写一个就对应所有的

background-clip: /*规定背景绘制的区域*/
	border-box 背景裁剪到边框盒
	padding-box 背景裁剪到内边距
	content-box 背景裁剪到内容
	text 按照文字剪切（属性需要加前缀 -webkit-）
background-origin:
	padding-box背景图像相对于内边距框来定位
	border-box背景图像相对于边框盒来定位
	content-box背景图像相对于内容框来定位 

CSS中块级元素，行级元素：
块级元素：
代表标签：h1-h6 div ul ol dl dd p
特性：能够独立显示一行，默认宽度为父级宽度，任意定义高度，没设置宽带默认和浏览器一样宽
转换：任何块级元素都可以用【display:block】转换为块元素，转换后具备块元素所有特性

块元素特点：
独占一行
可以定义宽高
在嵌套关系下，没有定义宽度，会自动设置父元素的宽度

行级元素：
代表标签：span a strong b en i font
特性：和相邻行内元素共同显示在一行，默认的宽度等于子集元素的宽度，不能定义宽高
转换：任何元素都可以通过【display:inline】转为行元素，转换后具备行元素的所有特性
 
行内元素特点：
在一行显示
不能直接定义宽高
只能嵌套文本或其他行内元素

行级块元素
代表标签：image input
特性：共同显示在一行（有空白缝隙），默认的宽的等于子元素的宽度，能任意定义宽高
转换：任何元素都可以通过【display:inline-block】转为块级元素，转换后具备行级块元素的所有特性

行内元素和行内块元素都可以当做文本来居中对齐，text-align:center;

display:none ：隐藏属性

background-color:rgba(0,0,0,0.3);
背景颜色rgb代码，a表示透明程度，最大是1

css的三种用法
1.内嵌
2.外链
3.行内

首行缩进：text-indent

font-style
normal 正常
italic 倾斜

可以定义两个类
比如：<a class="ni hao"></a>

字体表达方式
直接写中文名称
写字体英文名称
unicode编码（在浏览器console中可以写入escape("宋体")显示编码）

span内联元素
div块级元素
margin盒子的外边距（body的margin默认是8个像素）
border是加在元素内部的

定位：
position:relative;（正常定位）
left|right|top|botom//先要设置正常定位才能用
position:absolute;（根据父元素定位）
left|right|top|botom//先要设置父元素定位才能用
position:fixed;（根据浏览器窗口定位）
left|right|top|botom//先要设置浏览器定位才能用
z-index:1;（默认为0-999）
position:static;（没有定位，静态定位，可以用来取消定位）
position:inherit;（继承定位）
取消定位的值：top:unset;

绝对定位：
position:absloute;
特点：
1.元素使用绝对定位之后不占据原来的位置（脱标）
2.元素使用绝对定位，位置是以当前屏幕为准
3.嵌套的盒子，父盒子没有使用定位，子盒子绝对定位，子盒子位置是当前屏幕为准
4.嵌套的盒子，父盒子子盒子都使用绝对定位，子盒子位置是从父盒子出发
5.给行内元素使用绝对定位之后，转为行内块

相对定位：
position:relative;
特点：
1.使用相对定位，位置从自身出发
2.移动后还占据原来位置
3.子元素绝对定位，父元素相对定位
4.行内元素使用相对定位不能转行内块

position:fixed;
特点：
1.固定定位之后，不占据原来的位置（脱标）
2.元素使用固定定位之后，位置从浏览器出发
3.元素使用固定定位之后，会转成行内块

浮动属性：
float:left|right
脱离标准流，移动到父元素指定位置
漂浮在其他标准流盒子的上面
特点：
	1.元素浮动之后不占据原来的空间位（脱标）
	2.浮动的盒子在一行上显示，并排显示
	3.行内元素或块元素浮动之后转成行内块特性
清除浮动影响：
	清除浮动影响是用在不想受浮动影响的元素中
	为了使元素不被浮动影响，可以在被影响元素加入清除浮动
	属性：clear
	取值：
	1.none 默认值，不做任何清除操作
	2.left 清除当前元素的前面元素左浮动带来的影响，当前元素不会上前占位，并且左边不允许有浮动元素
	3.right 清除当前元素的前面元素右浮动带来的影响，当前元素不会上前占位，并且右边不允许有浮动元素
	4.both 清除全部
图形浮动对于文字的影响：
shape-outside
	border-box 文字贴在边框上
	padding-box 文字贴在内边距上
	margin-box 文字贴在外边距上
	content-box 文字贴在内容上
	根据形状去环绕影响，值和下面的值是一样的
	也可以根据透明图片进行环绕：
		url("1.png");

元素的形状：
	clip-path:
		circle(50% at 100% 100%); 圆形，50%是圆半径的大小，后面是圆心的位置
		ellipse(20% 30%); 椭圆，X轴和Y轴的半径大小
		polygon(0 0, 100% 100%, 0 100%); 每个点的位置	

overflow溢出：
hidde 隐藏
auto 自动显示滚动条
scroll 显示滚动条
滚动条显示在内部和border一样

浏览器默认文字大小：16px
行高是基线与基线之间的距离
行高=文字高度+上下边距
一行文字行高和父元素高度一致的时候会垂直居中

行高单位：
除了用像素之外，行高都是与文字的乘积
不带单位时，行高是和子元素大小想乘，em和百分比是以父元素相乘。

边框合并：
border-collapse:collapse;

内边距撑大盒子的问题
影响盒子宽度的因素
   内边距影响盒子的宽度
   边框影响盒子的宽度
盒子的宽度=定义的宽度+边框的宽度+左右内边距

继承的盒子一般不会被撑大
包含（嵌套）的盒子，如果此盒子没有定义宽度，给此盒子设置左右内边距不会撑大盒子

外边距塌陷
嵌套的盒子，直接给子盒子设置垂直方向的外边距的时候，会发生外边距塌陷
两个元素那个margin数值大就应用哪个，相同就合并外边距
 解决方法：
 1.给父盒子设置边框或内边距
 2.给父盒子设置overflow:hidden;
 
外边距合并，垂直会合并，水平不会
 
行内元素可以定义左右的内外边距，上下忽略

文档流（标准流）
  元素自上而下，自左而右，块元素独占一行，行内元素在一行显示，碰到父元素的边框换行。
浮动布局

当父盒子没有定义高度，嵌套的盒子浮动之后，下边的元素发生位置错误
1.额外标签法：
    在最后一个浮动元素后添加标签。<div style="clear:both;"></div>
overflow法：
2.给父元素使用： 
	overflow:hidden;（出了盒子就不能用了）
	overflow:auto;
	只要设置了overflow就行
3.用伪类选择器
.clearfix:after{
content:"";
display:block;
clear:both;
}
.clearfix{zoom:1}/*兼容IE浏览器*/

标签包含规范：
1.div可以包含所有的标签
2.p不能包含div h1等标签
3.h1可以包含p div等标签
4.行内元素可以包含行内元素

规避脱标流
1.尽量使用标准流
2.标准流解决不了的使用浮动
3.浮动解决不了的使用定位

图片和文字垂直居中对齐
这个适用于inline-block，默认属性是baseline;（基线对齐）
vertical-align:top|bottom|middle
可以设置数值，根据基线位置调整，比如10px -10px

margin-left:auto;/*左边充满*/
margin-right:auto;/*右边充满*/

元素命名：依据他们是什么来命名，多个单词用连接符连接
类应用于概念相似的元素

100vh代表浏览器高度的100%，vh是一个单位

<meter max="100" value="100"></meter> 这个可以做进度条,max最大是多少，value设置进度

使用服务器中自定义字体
@font-face{
font-family:aaa; /*自己随便起名字*/
src=url(),url() format();
	/*可以定义多个地址，如果加载不成功会继续加载别的
	format是帮助浏览器识别字体，如果不能识别就不加载了*/
} 


/*CSS3*/

css选择器的权值：
	默认 0
	元素 1
	类/伪类 10
	ID 100
	内联 1000

边框倒角：
	border-radius：四个值（和 margin padding 一样）
		可以用绝对数值（半径），百分比（当前元素宽高为准）
	border-radius-top-right 右上角，以此类推
边框阴影：
	box-shadow:
		h-shadow（阴影的水平偏移距离，取值为正向右偏移，反之向左） 
		v-shadow（阴影的垂直偏移距离，取值为正向上偏移，反之向下） 
		blur（模糊半径）
		spread（阴影的尺寸） 
		color（颜色） 
		inset（默认的外阴影更改为内阴影,值就是inset）
空白处理：
	white-space:nowrap
		强制一行显示，禁止换行
		默认值是normal
	white-space:pre
		显示空白的字符（空格，换行符）
	white-sapce:pre-line
		只显示换行符
	white-space:pre-wrap
		显示换行符，也会正常换行
文本溢出显示省略号：
	text-overflow:ellipsis
外边距溢出：
	在某些特殊情况下，为子元素设置上下外边距时，有可能会作用到父元素上
	特殊情况：
		1.父元素没有上或下边框
		2.必须为第一个子元素或最后一个子元素设置外边距时
	解决方案：
		1.设置父元素边框（颜色为透明，为了保持父元素高度，改父元素高度为减去边框的高度）
		2.子元素上加一个<table></table>
		3.设置父元素上内边距
		4.子元素上加一个div设置高度（自创）
为行内元素或行内块元素设置外边距
	1.为行内元素设置上下外边距无效
	2.为行内块元素设置上下外边距整行内容都跟着变
内边距的特殊处理
	对行内元素和行内块元素设置内边距时，只会影响自己，并不会影响到其他元素
box-sizing:
	重新制定元素框模型的计算模式
	取值：
		1.content-box 默认计算模式（宽度是内容）
		2.border-box 元素的真正尺寸会包含元素边框和内边距（宽度是总和）
background-size 背景图片的尺寸
	取值：
		1.value1 value2
			指定宽度和高度，用空格分隔
		2.value1% value2%
			当前元素的百分比作为背景图像的大小
		3.cover
			覆盖：将背景图等比放大，直到背景图完全覆盖到元素的所有区域（相当于 auto 100%）
		4.contain
			包含：将背景图等比放大，直到背景图像的下边或右边有一个边缘碰到元素为止（相当于 100% auto）
background-attachment 背景图片的固定
	取值：
		1.scroll 滚动，默认值。背景图会随着文档而滚动
		2.fixed 固定
渐变：
	两种或多种颜色之间平滑过度的效果，线性，径向，重复（渐变的分类）
渐变的组成（元素）：
	色标：决定了渐变的每种颜色及其出现的位置
	每种渐变效果都是由多个色标组成的（2个及以上）
渐变的语法：
	1.语法：
		属性：background-image
		值：linear-gradient() 线性渐变
			radial-gradient() 径向渐变
			repeating-linear-gradient() 重复线性
			repeating-radial-gradient() 重复径向
	2.线性渐变
		语法：background-image:linear-gradient(angle（方向/角度）,color-point（色标）, color-point,……);
			angle:渐变的填充方向
				值：1.to top 从下向上填充
					2.to right 从左向右填充
					3.to bottom 从上向下填充
					4.to left 从右向左填充
					5.0deg ~ 360deg 角度
						0deg == to top
						90deg == to right
						180deg == to bottom
						270deg == to left
					6.to top right 从左下到右上填充（以此类推）
			color-point:色标（标志位），表示每个颜色值，及其出现的位置，多个色标之间用逗号分隔
				例子：
					1.red 0%
						开始的时候是红色
					2.blue 50px
						填充到第50个像素的时候变蓝色
					3.色标的位置可以省略
						每个颜色平分元素区域
			中间点就是分界线
	3.径向渐变
		语法：background-image:radial-gradient(size at position,color point（色标）,color point,……);
			size at position 径向渐变的半径 at 圆心
				size 圆的半径（只能用px）
				position 圆心位置
					1.at 0px 0px
						将圆心设置元素左上角
					2.at 50% 50%
						将圆心设置为元素的正中间
					3.at right bottom
						将圆心设置元素右下角
						关键字：top/right/bottom/left/center
				色标设置的百分比是半径的
				色标的位置设置具体值，半径无效
浏览器的兼容性
	各主流浏览器均支持渐变，对于不支持的，可以尝试加前缀
	浏览器前缀：
		Firefox:-moz-
		Chrome和Safari:-webkit-
		Opera:-o-
		Ie:-ms-
	前缀加载位置：
		1.如果浏览器不支持属性，则将前缀加载都属性名称前面
		2.如果浏览器不支持值，则加载值前面
表格：
	1.表格的常用属性
		1.边距属性：padding
		2.尺寸属性：width,height
		3.文本格式化属性：
			font-*
			text-*
			color
			……
		4.背景属性：
			背景色，背景图，渐变
		5.border属性
		6.vertical-align
			作用：在单元格中设置文本的垂直对齐方式
			取值：top/middle/bottom
	2.表格的特有属性
		1.边框合并
			属性：border-collapse
			取值：
				1.separate 默认值，分离边框模式
				2.collapse 边框合并效果
		2.边框边距
			作用：单元格之间的距离，仅限于边框分离状态下使用
			属性：border-spacing
			取值：
				1.指定一个值
					表示单元格间水平和垂直之间相同
				2.指定两个值
					第一个值：单元格间的水平间距
					第二个至：单元格间的垂直间距
		3.标题位置
			属性：caption-side
			取值：
				1.top 默认值，标题显示在表格之上
				2.bottom 标题显示在表格之下
		4.显示规则
			作用：指定表格的布局方式
			默认布局方式为自动表格布局，即单元格的宽度时由内容决定的，与设定的值无关。
			属性：table-layout
			取值：
				1.auto 默认
				2.fixed 固定表格布局，既单元格的宽度以设定为主，不取决于内容
			自动表格布局 vs 固定表格布局
				1.自动表格布局
					1.单元格大小会适应内容大小
					2.缺点：表格复杂时，加载速度慢
					3.适用于不确定每列大小情况下使用
					4.虽然算法慢，但是能体现传统表格特点
				2.固定表格布局
					1.单元格大小取决于td中设置的值
					2.优点：加载速度快
					3.确定每列大小时，可以使用固定表格布局
					4.算法较快，缺点不够灵活
		5.隐藏空单元格：emty-cells:hide

子元素浮动父元素高度为0解决方法：
	1.直接设置父元素高度
		弊端：必须知道父元素高度
	2.设置父元素浮动
		弊端：对后续元素会有影响
	3.为父元素设置overflow属性，取值为hidden或auto
		弊端：如果有子级内容要溢出显示的话，也一同被隐藏
	4.父元素中追加空子元素，并设置其clear为both
显示效果：
	1.visibility
		作用：控制元素的可见性（显示/隐藏）
		取值：
			1.visible 默认值，可见
			2.hidden 隐藏，但是依然占据页面空间
			3.collapse 使用在表格元素上，删除一行或一列时，不影响表格整体布局
		display:none 和 visibility:hidden 区别
			1.display:none
				脱离文档流，隐藏后不占据页面空间
			2.visibility:hidden
				隐藏元素，不脱离文档流，继续占有原来位置
	2.opacity
		作用：改变元素的透明度
		取值：0.0 ~ 1.0 之间
	3.vertical-align
		作用：
			1.设置单元格内容垂直对齐方式
			2.对行内块元素设置vertical-align两边文本相对于该元素的垂直对齐方式
			3.设置图片两端的文本相对于图片的垂直对齐方式
		取值：top/middle/bottom/baseline（默认值，基线对齐）
	4.光标效果
		属性：cursor
		取值：
			1.default 默认
			2.pointer 小手
			3.crosshair 十字
			4.text 文本
			5.wait 沙漏
			6.help 帮助
列表（无序列表和有有序列表）
	1.列表项标识
		属性：list-style-type
		取值：
			1.none 无标记显示
			2.disc 实心圆
			3.circle 空心圆
			4.square 实心方块
	2.列表项图像
		作用：由自定义图像作为显示的标识
		属性：list-style-image
		取值：url(图像路径)
		也可以使用渐变
	3.列表项的位置
		列表项的默认位置是在列表项内容区域之外，列表的内边距范围内
		属性：list-style-position
		取值：
			1.ouside 默认，列表项位置在列表项之外
			2.inside 将列表项标识放在列表项区域之内
	4.列表属性
		属性：list-style
		取值：type url() position
	5.列表使用场合
		列表能够使用在纵向排列和横向排列的元素中
定位：
	1.定位属性
		1.position
			作用：指定元素的定位类型
			取值：
				1.static 默认值，静态定位
				2.relative 相对定位
				3.absolute 绝对定位
				4.fixed 固定定位
		2.偏移属性
			作用：改变元素在页面中的位置（移动元素）
			属性：
				1.top
				2.bottom
				3.left
				4.right
			取值：偏移距离，以px为单位的数值
		3.堆叠顺序
			作用：在元素出现堆叠效果时，改变他们的顺序
			属性：z-index
			取值：没有单位的数字，值越大越靠上
			注意：
				1.z-index只能作用在定位的元素上
				2.如果不指定z-index，则后来者居上
				3.父子关系（层级关系）不能使用z-index修改堆叠顺序，永远都是子压在父上
	2.定位方式
		1.相对定位
			元素会相对于它原来位置偏移某个距离，原本空间保留
			语法 position:relative
			使用场合：实现元素的微调
		2.绝对定位
			1.元素脱离文档流（空间位），不占据页面空间
			2.绝对定位元素会相对于它最近的已定位祖先元素实现位置的初始化,如果元素没有最近的已定位的祖先元素，那么元素就会相对于最初的包含块，如body html
			已定位元素：absolute/relative/fixed称为已定位元素
			祖先元素：无限父级元素
		3.特殊效果
			1.绝对定位元素会变成块级元素
			2.绝对定位元素可以使用margin，正常情况下auto会失
			3.不设置宽高会自动拉伸元素
多列（分栏）：
	1.分隔列
		属性：column-count
		取值：数字
	2.列间隔
		属性：column-gap
		取值：px为单位的数值
	3.列规则
		作用：定义每两列之间的线条样式
		属性：column-rule
		取值：width style color
CSS Hack：
	原理：使用css属性优先级解决兼容性问题
	css hack实现方式
		1.css类内部hack
			在样式属性名或值的前后增加前后缀以便识别不同的浏览器
			+background-color:red; //IE6 IE7
			-background-color:red; //IE6
			background-color:red\0; //IE8,9,10
			background-color:red\9\0; //IE9,10
		2.选择器hack
			在选择器前增加前缀识别不同的浏览器
			* 前缀：IE6识别
			*+ 前缀：IE7识别
		3.使用HTML条件注释判断浏览器版本，使用IE条件注释解决兼容性问题
			语法
				<!--[if 条件 IE 版本]>
					执行的操作
				<![endif]-->
			版本取值：
				1. 6~10之间任意数字
				2. 省略版本，判断是否是IE浏览器
			条件：
				1. gt 大于  <!--[if gt IE 6]><![endif]-->
				2. lt 小于
				3. gte 大于等于
				4. lte 小于等于
				5. ！不等于  <!--[if !IE]><![endif]-->
				6. 省略不写  判断是否为IE或指定的版本
转换：
转换是改变元素在页面中的大小，位置，形状，角度的一种方式
转换分为 2D转换 和 3D转换
2D转换：使元素在X轴和Y轴进行的转换操作
3D转换：增加了Z轴上的转换操作
转换属性：transform
取值：
	1. none
	2. transform-functions  一组转换函数，表示一个或多个转换函数，多个的话，用空格隔开
转换的原点：
	属性：transform-origin
	默认：原点在元素的中心处
	取值：
		两个值：值1(X) 值2(Y);
		三个值：值1(X) 值2(Y) 值3(Z);
2D的位移：
	改变元素在X轴和Y轴的位置
	语法：
		属性：transform
		函数：
			translate(X)  改变元素在X轴上的位置，取值为正右移，反之左移
			translate(X,Y)  改变元素在X轴和Y轴的位置，Y轴取值为正下移，反之上移
			translatex(X)  单项改变
			translatey(Y)
2D缩放：
	改变元素在X轴或Y轴上的大小
	语法：
		属性:transform
		函数：
			scale(value)  value是缩放倍数。给一个值，等比例缩放
			scale(x,y)  分别改变元素在X轴和Y轴的上的大小
			scalex(X)  X轴缩放
			scaley(Y)  Y轴缩放
				取值：
					默认值：1  原始大小
					缩小：0~1之间的小数
					放大：大于1的数值
					取负值：旋转180deg的效果
2D旋转：
	属性：transform
	函数：rotate(ndeg)
		取值为正 顺时针旋转
		取值为负 逆时针旋转
	注意：
		1. 转换原点
			旋转围绕着转换原点来做的，原点位置不同，效果也不同
		2. 旋转时连同坐标轴也一同跟着转
2D倾斜：
	改变元素在页面中的形状
	以原点为中心，围绕着X轴和Y轴产生的倾斜角度
	属性：transform
	函数:
		skew(Xdeg)  横向产生倾斜效果，实际改变是Y轴的倾斜角度
			值为正：Y轴逆时针角度倾斜
			值为负：Y轴顺时针角度倾斜
		skew(Xdeg,Ydeg)
			X 横向倾斜
			Y 纵向倾斜
				值为正，X按顺时针角度倾斜
				值为负，X按逆时针角度倾斜
		skewx(Xdeg)
		skewy(Ydeg)
同时使用多个转换：
	transform:scale() translate();
	写的循序会影响转换效果（先旋转再位移会改变坐标轴方向）
3D转换:
	x轴从左往右（左负右正）
	y轴从上往下（上负下正）
	z轴从里往外（里负外正）
	1. perspective 属性
		模拟人眼到3D变换物体之间的距离
		该属性要添加到3D转换元素的父元素上
		单位是px
		浏览器的兼容性：
			chrome和Safari  -webkit-perspective:数值;
	2. 3D转换-旋转
		属性：transform
		取值：
			1. rotatex(ndeg)
			2. rotatey(ndeg)
			3. rotatez(ndeg)
			4. rotate3d(x,y,z,ndeg)
				x,y,z (1,1,1)
				取值为0该轴不参加旋转
				取值为1参加到旋转中来
	3. 3D转换-位移
		改变元素在X,Y,Z上的位置
		2. transform 属性
			取值：
				translatez(Z);
				translate3d(X,Y,Z);
	transform-style
			控制子元素是否开启三维空间（写在父盒子上）
			取值：
				1. flat  默认值，不开启3d立体空间
				2. preserve-3d  子元素开启3d立体空间
CSS过渡
	在一段时间内，CSS属性值平滑变化的一个效果
	过渡效果四要素
		1. 指定过渡属性
			指定哪个属性值在变化时需要使用过渡效果
		2. 指定过渡时间
			多长时间内完成过渡效果
		3. 指定过渡时间的速率
			过渡过程中的变化速率（匀速，先快后慢，……）
		4. 指定过渡的延迟时间
			当用户激发操作后，等待多长时间才激发效果
	过渡属性
		可以一次设置多个属性值，属性值用逗号隔开，每个属性值相互对应
			transition-property:background-color,border-color;
			transition-duration:1s,2s;
			transition-timing-function:linear,ease-in;
			transition-delay:1s,200ms;
			简写：
				transition:background-color 1s linear 1s,border-color 2s ease-in 200ms;
		1. transition-property 指定过渡属性
			取值：none | all | property-name
			property-name 要使用过渡效果的属性名称
			可以设置过渡效果的属性：
				1. 颜色属性：color background-color border-color
				2. 取值为数值的属性：尺寸 边框粗细 ……
				3. 转换属性 transform
				4. 渐变属性
				5. 阴影属性
				6. visibility
		2. transition-duration 指定过渡的时长
			取值：s | ms 单位的数值
			注意：默认值为0s，没有过渡效果
		3. transition-timing-function 指定过渡时间速率
			取值：
				1. ease 默认值，先慢后快再慢
				2. linear 线性，匀速
				3. ease-in 慢速开始快速结束
				4. ease-out 快速开始，慢速结束
				5. ease-in-out 慢速开始结束，中间先快后慢
				6. steps(3) 一步一步的走
		4. transition-delay 过渡延迟
			取值：s | ms 单位的时间
		5. 简写方式
			transition:property duration tining-function delay;
CSS动画：
	使元素从一种样式逐渐变化为另一种样式的过程
	CSS实现动画，会存在兼容性问题，尽量加浏览器前缀
	使用动画步骤
		1. 定义动画
			指定动画名称和创建动画中的每个状态（关键帧）
			关键帧：当前元素状态的时间点（百分比是划分时间）及样式
			浏览器兼容性：
				@-webkit-keyframes
			语法：
				在样式表中声明
				@keyframes 动画名称{
					0%{ /*可以用关键字from*/
						动画开始时的样式
					}
					100%{ /*可以用关键字to*/
						动画结束时的样式
					}
				}
		2. 为元素调用动画
			指定调用的动画名称，时长，播放次数……
			属性：
				1. animation-name  指定调用动画名称
				2. animation-duration  指定动画完成一个周期所用时间（m|ms）
				3. animation-timing-function  指定动画的速率（ease,linear,ease-in,ease-out,ease-in-out）
				4. animation-delay  指定动画的延迟（m|ms）
				5. animation-iteration-count  指定动画播放次数
					取值：
						1. 具体数值
						2.infinite 无限播放
				6.animation-direction  指定动画播放方向
					默认：由0%播放到100%
					取值：
						1. normal 正常
						2. reverse 逆向播放（100%~0%）
						3. alternate 轮流播放（奇数次数：0%~100% 偶数次数：100%~0%）
				7.简写：
					animation:name duration timing-function delay iteration-count direction;
				8. animation-fill-mode  规定动画在播放前后填充效果（可以简写）
					取值：
						1. none  没有填充效果
						2. forwards  动画播放完成后，保持最后一帧状态
						3. backwards 动画播放前元素的位置
						4. both 动画播放前后，分别采用对应填充状态
				9. animation-play-state  控制动画是播放还是暂停
					取值：
						1. paused 暂停
						2. running 播放
鼠标穿透：pointer-events:none;
设置css文件编码：@charset "utf-8";
禁止选择文本：-webkit-user-select:none;

CSS变量（自定义属性）
	:root 根元素伪类（指代根元素），可以全局范围内设置变量
	:root {
		--size:10px;
		/*定义变量*/
	}
	.font {
		font-size:var(--size, 15px);
		/*使用变量，如果变量不存在就取默认值*/
	}
	变量的类型：字符串和非字符串
	:root {
		--hello:"hello";
		--world:"world";
	}
	.main::after {
		content:var(--hello)var(--world);
		/*字符串的拼接（只能字符串才能拼接）*/
	}
	:root {
		--size:50;
		/*数值变量的定义*/
	}
	.main {
		font-size:calc(var(--size)*1px);
		/*数值变量的计算*/
	}
	/*js操作css变量*/
	var dom=document.querySelector(".main");
	var styles=getComputedStyle(dom);
	//获取css变量值
	styles.getPropertyValue("--color");
	//设置css变量
	styles.getProperty("--aa", 10px);

移动web：
必须声明viewport元标签
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
	viewport 承载窗口的网页，可设置宽度
	<!-宽度是设备宽度-->
	<meta name="viewport" content="width=device-width">
	<!-初始缩放比例100%-->
	content="initial-scale=1.0"
	<!-禁止用户缩放-->
	content="user-scalable=no"
去除a链接高亮：
	-webkit-tap-highlight-color:transparent;
去除ios中输入框默认样式：
	-webkit-appearance:none;
禁用长按页面弹出菜单：
	-webkit-touch-callout:none;

弹性布局（一种布局方式）：
主要解决某个元素中子元素的布局方式，为布局提供很大的灵活性。
相关概念：
	1.容器：要发生弹性布局子元素的父元素称为容器。就是设置display:flex那个元素。
	2.项目：要做弹性布局的子元素们。就是设置了display:flex那个元素的子元素们。
	3.主轴：项目们排列方向的一条轴。如果项目们是横向排列，x轴就是主轴，如果是纵向排列，y轴是主轴。项目们排列顺序是主轴的起点和终点。
	4.交叉轴：与主轴相交的一条轴。项目们在交叉轴的对齐方式是交叉轴的起点和终点。
容器的属性：
	将块级元素设置为容器
		display:flex
	将行内元素设置为容器
		display:inline-flex
	元素设置为容器后，项目（子元素）的float/clear/vertical-align/text-align属性失效
	项目可以修改尺寸
	主轴的方向
		flex-direction:row;
			row 默认值，主轴是x轴，主轴起点是左端
			row-reverse，主轴是x轴，主轴起点是右端
			cloumn，主轴是y轴，主轴起点是顶端
			cloumn-reverse，主轴是y轴，主轴起点是底端
	设置项目的换行
		flex-wrap:nowrap;
			nowrap 默认值，不换行(空间不够也不换行，项目自动缩小)
			wrap 空间不够就换行
			wrap-reverse 空间不够就换行(反转)
	上面两个的缩写：flex-flow:direction wrap;
	项目在主轴的对齐方式：
		justify-content:flex-start;
			flex-start 主轴起点对齐
			flex-end 主轴终点对齐
			center 主轴居中对齐
			space-between 两端对齐(两端无空白)
			space-around 两端对齐(每个间距大小相同)
	单行项目在交叉轴的对齐方式：
		align-items:flex-start;
			flex-start 交叉轴起点对齐
			flex-end 交叉轴终点对齐
			center 交叉轴居中对齐
			stretch 高度自动拉伸（没指定高度的情况下）
	多行项目在交叉轴的对齐方式：
		align-content:flex-start;
			flex-start 交叉轴起点对齐
			flex-end 交叉轴终点对齐
			center 交叉轴居中对齐
			space-between 两端对齐(两端无空白)
			space-around 两端对齐(每个间距大小相同)
			stretch 高度自动拉伸（没指定高度的情况下）
项目的属性：
	设置项目交叉轴的对齐方式：
		align-self:flex-start;
			flex-start 交叉轴起点对齐
			flex-end 交叉轴终点对齐
			center 交叉轴居中对齐
			stretch 高度自动拉伸（没指定高度的情况下）
	设置排序：
		order:0;
			值越小，越靠前，默认是0
	项目放大比例：
		flex-grow:0;
			大于1按总和比例分配，不满1按当前比例分配
			默认值是0
	项目缩小比例：
		flex-shrink:1;
			默认是1
	是否使用设置宽度
		flex-basis:auto;
			默认是auto，设置0表示不用设置的宽度
	flex:flex-grow flex-shrink flex-basis
	flex:none;  -> flex : 0 0 auto;
	flex:auto;  -> flex:1 1 auto;
	flex:1;    ->  flex:1 1 0;
	flex:0;   ->   flext:0 0 0;

媒体查询：
@media 媒体类型 关系运算符 (媒体特性) {
	选择器 { 样式 }
}
媒体类型：all print screen
关系运算符：and not only
媒体特性：max-width min-width width
根据不同的屏幕宽度引入不同的css资源
	<link rel="stylesheet" media="screen and (min-width:1000px)" href="abc.css" />

	
		
		
		
		
		
		
		
		
		
		
		
		