
/*C语言*/
数据类型：
	常量：const 类型 常量名
	基本类型：
		整型4字节int(长整型8字节long int，短整型2字节short int)
		字符型1字节char(单个字符用单引号，字符串用双引号)
		浮点型（单float（默认保留6位小数）/双精度double）
		枚举型
	指针类型
	构造类型：数组，结构体，公用体
	空类型

数字数据类型限定符：
	signed 符号位
	unsigned 无符号位

声明字符串：
	char str[] = {'a', 'b', 'c', '\0'}; //也能自定义长度
	char str[] = "";
	
进制转换：
	进制就是逢N进1
	10进制：1（%d或%hd或%ld或%lld）
	8进制：01（%o）
	16进制：0x1（%x或%X或%#x或%#X）

常量以什么样的二进制代码存储在计算机中
	整数是以补码形式转化为二进制存储
	实数是以IEEE754标准转化为二进制存储
	字符ASCII转为整数再以补码转为二进制存储

字节：
	字节是存储得单位，是硬件所能访问的最小单位
	1字节=8位
	1k=1024字节
	1M=1024K

ASCII码：
	不是一个值，而是一种规定
	规定了不同的字符用哪个整数去表示

printf() %d 以十进制格式输出
输出控制符：
	%d %ld %f %lf %c %x(%X或者%#X) %o %s
	二进制代码可以表示数据也能表示指令
	如果二进制代码表示的是数据的话，采用不同格式就是有不同的输出结果
	浮点型保留两位小数：printf("%.2f", a);

scanf() //通过键盘将数据输入到变量中

运算符的优先级：算术>关系>逻辑>赋值

#include <> //<>表示导入系统文件，""表示导入自定义文件

#include <stdlib.h> //系统管理库
system() 函数
	可以打开cmd中的命令，用字符串传入
// osk 打开软键盘
// 写路径使用双反斜杠（会转义） d:\\1.txt

C编译过程：
	1.预处理：宏定义展开，头文件展开，条件编译，去掉注释
	2.汇编：检查语法，C转汇编
	3.编译：将汇编语言转为机器语言（二进制码）
	4.链接：将C语言依赖库链接到程序中

计算数据类型/数据内存中占的字节大小：sizeof(int)

原码：正整数转为二进制
反码：原码一样
补码：原码一样

原码：负整数转为带符号位的正整数的二进制
反码：除了符号位，其余都取反
补码：在反码基础上加1

计算时，计算的是补码，结果最高位省去
如果第一位是1，即负数，倒退回原码（减1再取反），转成十进制

常量宏定义：#define 标识符 常量 （后面不加分号）

goto语句用法：
	if (num > 100)
		goto hello;
	hello: printf("yes");

数组初始化：
	int arr[] = {0, 1, 2};
	int arr[] = {[0] = 0, [3] = 0};

字符串处理函数：
	获取字符串长度：strlen()
	拷贝字符串：
		全部拷贝：strcpy(new, old)
		拷贝一部分：strncpy(new, old, 10); //后面要追加'\0'，10是字节
	连接字符串：strcat(new, old) strncat(new, old, 10) //连接一部分
	比较字符串：strcmp(str1, str2) strncmp(str1, str2, 10) //一样是0，不一样是1

二维数组：int arr[5][5];
二维数组的初始化：
	int arr[2][3] = {1, 2, 3, 4, 5, 6} //线性存放
	也可以是：int [2][3] = { {1, 2, 3}, {4, 5, 6}};
	只针对部分元素赋值：int[2][3] = { {1}, {2}, {3} };
	自定义赋值位置：int[2][3] = { [0][0] = 10, [1][2] = 5};

C语言内存指针：
	char* pa; //定义一个指向字符型的指针变量
	取地址运算符：&
	取值运算符：*
	输出指针地址：%p
	指针可以加减：*(p+1)
	数组名是数组第一个元素的地址
	
指针数组：存放指针变量的数组 char* str[] = {&a, &b}
数组指针：指向数组的指针 char (*str)[] = &arr

通用指针：void* p
强制指针类型转换：(int*)p

NULL指针 == (void*)0

const 修饰常量
const int num = 10
const int* p = &num; //指向常量的指针，不能改变指向的值
int* const p = &num; //常量指针，不能改变指向
const int* const p = &num; //指向常量的常量指针，不能改值和指向

声明函数：
int name(char, int)
定义函数：
int name(char a, int b)

函数指针：int (*p)(int);
指针函数：int *p(int); //返回一个指针
	
作用域：
	代码块作用域
	文件作用域
extern int num //表示num为外部文件的全局变量，必须有声明
static int num //表示num为整个文件的全局变量
	
存储类型：
	自动：auto int num //自动释放变量和无连接属性
	寄存器：register int num //和自动一样，不能取地址
	静态局部变量：static int num //声明在局部变量，生存期和全局变量一样
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	








