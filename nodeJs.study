global 全局对象
console 控制台对象
	console.log
	console.info
	console.error
	console.warn
	//统计代码耗时
	console.time() //开始计时
	console.timeEnd() //结束计时
process 进程对象
	process.arch //查看系统cpu架构
	process.platform //查看操作系统的版本
	process.pid //查看当前运行的node的进程编号
	process.kill(pid) //结束进程方法，传入进程编号
	process.nexTick(callbak)
		//立即执行的定时器，比setImmediate早
Buffer 缓冲区对象
	//缓冲区：内存中存储数据的区域
	let buf=Buffer.alloc(3, "abc")
		//创建一个缓冲区，参数1是空间大小，参数2是数据
	buf.toString() //将buffer数据转为字符串
定时器
	setImmediate(callbak) //立即执行的定时器
	clearImmediate(timer) //清除定时器

模块：
	是一个独立的功能体，每一个文件/目录都可以称为一个模块
	模块分为：自定义模块，核心模块（官方提供），第三方模块
nodejs会自动为模块添加一个构造函数
(function(exports, require, module, __filename, __dirname) {
	//程序员写的代码
})
	require 是一个函数，用于导入一个模块
	module 指代当前模块
	module.exports 当前模块导出的对象，供其他模块使用（公开的内容）
	exports 指向module.exports
	__filename 获取当前文件带有绝对路径的文件名
	__dirname 获取当前文件的绝对路径
导入模块	
	require("./1.js") 导入文件模块（拓展名可以省略）
	require("./dir") 导入目录模块
		目录中如果没有package.json配置（main属性）自动获取index.js文件
		package.json 模块说明文件
	不带路径导入的是node_modules目录中的模块
		先作为核心模块（nodejs提供的）去导入
		如果找不到就作为第三方模块（找node_modules目录）去导入
			node_modules这个目录不一定在同一级目录，node会一级一级往上找，直到顶层目录
		还找不到就报错
包和npm
	包：package 就是node_modules下的目录模块，
	npm：下载和安装包的工具
	安装包命令：
		npm install 包名
		安装的路径是控制台的路径

同步和异步的区别：
	同步：阻止后面代码执行，只够执行完毕才能执行后面代码。通过返回值获取结果
	异步：不会阻止后面代码执行，放在整个线程最后执行。通过回调函数获取结果

核心模块：
	查询字符串模块：
		引入：
			const querystring=require("querystring");
		解析查询字符串为对象：
			let obj=querystring.parse(string);
		对象转换为查询字符串：
			let string=querystring.stringify(obj);
	URL模块：
		引入：
			const url=require("url");
		解析url为对象：
			let obj=url.parse(string);
			obj.protocol //协议
			obj.hostname //主机名（域名/IP地址）
			obj.port //端口
			obj.pathname //请求的文件在服务器上的路径
			obj.query //查询字符串
		对象转换为url字符串：
			url.format({
				protocol:"https",
				hostname:"www.abc.com",
				port:888,
				pathname:"/123/456/00.html",
				query:{
					id:1
					name:"你好"
				}
			});
	文件系统模块：
		引入：
			const fs=require("fs");
		读取文件状态：
			fs.stat("文件路径", function(err, status) {
				//err是可能发生的错误
				//status是文件状态的结果
				if(err) throw err; //抛出错误
				
				status对象的方法：
					status.isFile(); //判断是否为文件
					status.isDirectory(); //判断是否为目录
			});
			//同步方式
			fs.statSync("文件路径");
		创建目录：
			//fd 表示文件/目录路径
			fs.mkdir(fd, (err)=>{});
			fs.mkdirSync(fd);
		删除目录：
			fs.rmdir(fd, (err)=>{});
			fs.rmdirSync(fd);
		读取目录：
			//files是读取目录中的文件名
			fs.readdir(fd, (err, files)=>{});
			fs.readdirSync(fd);
		读取文件：
			fs.readFile(fd, (err,data)=>{});
			fs.readFileSync(fd);
		写入（创建）文件：
			//如果没有文件就自动创建
			//覆盖写入文件数据
			fs.writeFile(fd, data, (err)=>{});
			fs.writeFileSync(fd, data);
		追加写入（创建）文件：
			fs.appendFile(fd, data, (err)=>{});
			fs.appendFileSync(fd, data);
		判断文件（目录）是否存在：
			//异步的已经废弃
			fs.existsSync(fd);
		删除文件：
			fs.unlink(fd, (err)=>{});
			fs.unlinkSync(fd);
	http模块：
		发送GET请求：
			http.get(url, (res)=>{
				//res响应的对象
				res.statusCode //响应状态码
				//data事件：当服务器有数据传递的时候触发
				res.on("data", (data)=>{}) //获取响应主体
			});
		创建web服务器：
			let server=http.createServer();
			//监听端口
			server.listen(888);
			//接收请求，做出响应
			//request事件：当有请求时，自动触发
			server.on("resquest", (req, res)=>{
				//req：请求的对象
					req.method //请求的方法
					req.url //请求的url
					req.headers //请求的头信息
				//res：响应的对象
					res.writeHead(200,{
						"content-type":"text/html"
					}); //设置响应头信息
			})
			server.end() //结束响应,发送响应主体
	express框架：
		基于nodejs，快速、开放、极简的web开发框架
		//引入express包
		const express=require("express");
		//创建web服务器
		let server=express();
		//监听端口
		server.listen(8888);
		路由：浏览器向web服务器发送请求，服务器根据请求的方法和url做出响应
		路由三要素：请求的方法，请求的url，响应（回调函数）
			//接收get请求的url
			server.get(url, (req,res)=>{
				请求方法，请求URL，请求头 和http模块获取的方法一样
				//查询字符串格式化后的对象
				req.query
				//响应内容
				res.send();
				//响应文件
				res.sendFile(__dirname+"/path.html");
			});
			//接收post请求的url
			server.post(url, (req, res)=>{
				//接收post数据
				req.on("data", (buf)=>{
					let data=buf.toString();
				})
			});
			//接收路由发送的数据
			server.get("/abc/:id", (req, res)=>{
				//获取数据
				req.params;
			});
		路由器：就是一个自定义的模块，存放了一些路由
			//新建路由器
			let router=express.Router();
			//添加路由到路由器
			router.get(url, ()=>{});
			//导出路由器
			module.exports=router;
			//引入路由器
			let abc=require("./abc");
			//挂载路由器（所有路由都放在了url下）
			server.use(url, abc);
		中间件：用于服务主要的业务逻辑（路由）
			分类：应用级，路由级，内置，第三方，错误处理
			应用级中间件：每一个中间件都是一个函数，需要配合其他中间件或路由使用
				//拦截处理所有的请求
				server.use((req, res, next)=>{ next(); });
				//处理拦截特定的请求
				server.use("/abc", (req, res, next)=>{ next(); });
				//路由执行完毕后做的处理
				server.get("/abc", (req, res, next)=>{ next(); });
				server.use("/abc", (req, res)=>{ });
			内置中间件：
				static 托管静态资源到某个目录
				//浏览器请求静态资源，服务器自动到对应的目录中寻找
				//静态资源：html,js,css,img……
				server.use( express.static("public") );
			第三方中间件：
				bodyParser 将post请求的数据转化为对象
				let bodyParser=require("body-parser");
				server.user( bodyParser.urlencoded({
					//不使用第三方的qs模块，而使用querystring核心模块格式化字符串
					extended:false
				}) );
				在路由中就可以使用req.body获取post数据了
				
mysql模块（第三方）：
	//创建mysql连接
	let conn=mysql.createConnection({
		host:"127.0.0.1",
		port:3306,
		user:"root",
		password:"root",
		database:"abc"
	});
	//执行连接（可以省略）
	conn.connect();
	//执行sql语句
	conn.query(sql, (err, res)=>{
		if(err) throw err;
		console.log(res);
	});
	//关闭连接
	conn.end();
	//mysql连接池
	let pool=mysql.createPool({
		//信息和普通连接一样
		//连接池大小，默认是15条连接
		connectionLimit:15
	});
	//执行sql语句
	pool.query(sql,(err, res)=>{});
	//使用占位符执行sql语句
	pool.query("update abc set name=?,sex=? where id=?",["李狗蛋",1,10],(err, res)=>{});
	//模块扩展的sql插入语句
	pool.query("insert into abc set ?",[{
		name:"李狗蛋",
		sex:1,
		age:18
	}]);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	