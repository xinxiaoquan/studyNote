global 全局对象
console 控制台对象
	console.log
	console.info
	console.error
	console.warn
	//统计代码耗时
	console.time() //开始计时
	console.timeEnd() //结束计时
process 进程对象
	process.arch //查看系统cpu架构
	process.platform //查看操作系统的版本
	process.pid //查看当前运行的node的进程编号
	process.kill(pid) //结束进程方法，传入进程编号
	process.nexTick(callbak)
		//立即执行的定时器，比setImmediate早
Buffer 缓冲区对象
	//缓冲区：内存中存储数据的区域
	let buf=Buffer.alloc(3, "abc")
		//创建一个缓冲区，参数1是空间大小，参数2是数据
	buf.toString() //将buffer数据转为字符串
定时器
	setImmediate(callbak) //立即执行的定时器
	clearImmediate(timer) //清除定时器

模块：
	是一个独立的功能体，每一个文件/目录都可以称为一个模块
	模块分为：自定义模块，核心模块（官方提供），第三方模块
nodejs会自动为模块添加一个构造函数
(function(exports, require, module, __filename, __dirname) {
	//程序员写的代码
})
	require 是一个函数，用于导入一个模块
	module 指代当前模块
	module.exports 当前模块导出的对象，供其他模块使用（公开的内容）
	exports 指向module.exports
	__filename 获取当前文件带有绝对路径的文件名
	__dirname 获取当前文件的绝对路径
导入模块	
	require("./1.js") 导入文件模块（拓展名可以省略）
	require("./dir") 导入目录模块
		目录中如果没有package.json配置（main属性）自动获取index.js文件
		package.json 模块说明文件
	不带路径导入的是node_modules目录中的模块
		先作为核心模块（nodejs提供的）去导入
		如果找不到就作为第三方模块（找node_modules目录）去导入
			node_modules这个目录不一定在同一级目录，node会一级一级往上找，直到顶层目录
		还找不到就报错
包和npm
	包：package 就是node_modules下的目录模块，
	npm：下载和安装包的工具
	安装包命令：
		npm install 包名
		安装的路径是控制台的路径

同步和异步的区别：
	同步：阻止后面代码执行，只够执行完毕才能执行后面代码。通过返回值获取结果
	异步：不会阻止后面代码执行，放在整个线程最后执行。通过回调函数获取结果

核心模块：
	查询字符串模块：
		引入：
			const querystring=require("querystring");
		解析查询字符串为对象：
			let obj=querystring.parse(string);
		对象转换为查询字符串：
			let string=querystring.stringify(obj);
	URL模块：
		引入：
			const url=require("url");
		解析url为对象：
			let obj=url.parse(string);
			obj.protocol //协议
			obj.hostname //主机名（域名/IP地址）
			obj.port //端口
			obj.pathname //请求的文件在服务器上的路径
			obj.query //查询字符串
		对象转换为url字符串：
			url.format({
				protocol:"https",
				hostname:"www.abc.com",
				port:888,
				pathname:"/123/456/00.html",
				query:{
					id:1
					name:"你好"
				}
			});
	文件系统模块：
		引入：
			const fs=require("fs");
		读取文件状态：
			fs.stat("文件路径", function(err, status) {
				//err是可能发生的错误
				//status是文件状态的结果
				if(err) throw err; //抛出错误
				
				status对象的方法：
					status.isFile(); //判断是否为文件
					status.isDirectory(); //判断是否为目录
			});
			//同步方式
			fs.statSync("文件路径");
		创建目录：
			//fd 表示文件/目录路径
			fs.mkdir(fd, (err)=>{});
			fs.mkdirSync(fd);
		删除目录：
			fs.rmdir(fd, (err)=>{});
			fs.rmdirSync(fd);
		读取目录：
			//files是读取目录中的文件名
			fs.readdir(fd, (err, files)=>{});
			fs.readdirSync(fd);
		读取文件：
			fs.readFile(fd, (err,data)=>{});
			fs.readFileSync(fd);
		写入（创建）文件：
			//如果没有文件就自动创建
			//覆盖写入文件数据
			fs.writeFile(fd, data, (err)=>{});
			fs.writeFileSync(fd, data);
		追加写入（创建）文件：
			fs.appendFile(fd, data, (err)=>{});
			fs.appendFileSync(fd, data);
		判断文件（目录）是否存在：
			//异步的已经废弃
			fs.existsSync(fd);
		删除文件：
			fs.unlink(fd, (err)=>{});
			fs.unlinkSync(fd);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	