py中的注释
	#单行注释
	"""
		多行
		注释
	"""
	'''
		这也是多行注释
	'''
格式化符号
	用于格式话输出数据
	%d 带符号的十进制整数
		%03d 表示输出显示3位，不够前面补0
	%f 浮点数（默认保留6位小数）
		%.2f 保留2位小数
	%s 字符串
	"你好，我叫%s"%name
	"我的年龄是%d，体重是%.2f，班级编号是%03d"%(age,weight,stuId)
	f格式化字符串
		f"我的名字是{name}，年龄是{age}"
print 结束符号
	print("",end="\n")
	默认是换行符
输入数据：
	input("提示信息：")
数据类型转换：
	转整型 int(data)
	转浮点型 float(data)
	转字符串 str(data)
	计算字符串的表达式 eval(str)
条件判断语句
	if True:
		print(1)
	elif True:
		print(2)
	else:
		print(3)
生成随机整数（包含开始和结束数字）
	import random
	random.randint(1,10)
三目运算符：
	a if a>b else b
while循环
	while True:
		do thing;
for循环
	遍历数据序列/列表/字符串
		for c in str:
			print("%s"%c)
字符串切片：
	str[开始下标:结束下标:步长]
		步长是选取间隔，默认是1
字符串（序列）操作函数
	检测子串是否在字符串，返回子串开始位置下标，没有就返回-1
		str.find(子串, 开始位置, 结束位置)
		str.rfind(子串, 开始位置, 结束位置) #从右侧查找
	检测子串出现的次数
		str.count(子串, 开始位置, 结束位置)
	字符串替换：
		str.replace(旧子串, 新子串, 替换次数)
	字符串分割为列表：
		str.split(分割字串, 分割次数)
	字符串连接列表：
		字符串.join(列表)
	字符串首字母转大写：
		str.capitalize()
	字符串每个单词首字母转大写：
		str.title()
	转大写：str.upper()
	转小写：str.lower()
	删除字符串左侧空白字符：
		str.lstrip()
	删除字符串右侧空白字符：
		str.rstrip()
	删除字符串两侧空白字符
		str.strip()
	字符串左对齐
		str.ljust(字符串, 填充字符)
	字符串右对齐
		str.rjust(字符串, 填充字符)
	字符串居中对齐
		str.center(字符串, 填充字符)
	判断是否以某字串开头：
		str.startswith(子串, 开始下标, 结束下标)
	判断是否以某字串结尾：
		str.endswith(子串, 开始下标, 结束下标)
删除变量：del abc
列表序列：
	可以存放多个不同类型数据，类似于js中的数组
	获取列表元素个数
		len(list)
	判断某个元素是否在列表中
		"abc" in list #是否不在 not in
	查找某个元素在列表中的位置
		list.index("aaa")
	追加数据（追加序列会整体追加）
		list.append("123")
	追击数据（追加序列会把数据逐一追加）
		list.extend([1,2,3])
	插入数据
		list.insert(1, "hello")
	删除列表
		del list
	删除列表指定下标的数据
		del list[0]
	删除指定下标数据（默认是最后一个） 
		返回删除的数据
		list.pop()
	删除列表中的第一个匹配的数据
		list.remove("abc")
	清空列表
		list.clear()
	列表反转：
		list.reverse()
	列表排序：
		# 默认是升序排列 reverse=False
		list.sort(reverse=False)
	列表复制：
		list.copy()
元组序列：
	元组的数据不能修改，只能查询（api和列表一样）
	定义多数据的元组
		(1,2,3)
	定义单数据的元组
		(1,)
字典序列：
	定义字典：dict1={"name":"23"}
		定义空字典：
			dict2={} 
			dict3=dict()
	增/改键值对:
		dict1["id"]=1
	删除键值对：
		del dict1["id"]
	清空字典：
		dict1.clear()
	查询字典数据：
		dict1.get("key", key不存在返回的值)
			如果用[]访问，key不存在报错
	所有key列表(可遍历对象)
		dict1.keys()
	所有value列表(可遍历对象)
		dict1.values()
	转换为列表(可遍历对象)
		dict1.items()
		遍历：
			for key,value in dict1.items():
				print(f"{key}->{value}");
集合序列：
	所有数据没有顺序，不能重复
	创建空集合：
		data=set()
	创建有数据的集合：
		data={1,2,3,4,5,6}
	追加数据到集合
		data.add(123)
	追加序列到集合
		data.update({1,2,3,4})
	删除集合内指定的数据
		data.discard(22)
	判断数据是否存在
		1 in data #存在返回True
		2 not in data #不存在返回True
数据序列公共的操作：
	运算符：
		+ 合并运算 支持的容器：字符串 列表 元组
		* 复制运算 支持的容器：字符串 列表 元组
	关键字：
		in/not in 所有容器都可用
	方法：
		str() 转字符串
		len() 统计序列元素的个数 所有容器都可用
		del/del() 删除容器中的元素 所有容器都可用
		max() 返回容器中最大数值 所有容器都可用
		min() 返回容器中最小数值 所有容器都可用
		range(start, end, step)
			返回从开始到结束（步长）所有的数值的可迭代对象
		enumerate()
			将一个可遍历数据对象组合为一个索引序列，同时列出下标和数据
容器类型（数据序列）的转换：
	tuple() 转元组
	list() 转列表
	set() 转集合
序列可以使用推导式简化代码

函数：
	def abc(a, b):
		return a6+b;
函数的说明文档：
	def abc():
		"""
			这里可以写说明文档
		"""
		return "OK"
	查看函数的说明文档：
		help(abc)
函数作用域访问全局变量：
	global a #声明a为全局变量
	a=100
函数的参数：
	位置参数：
		def fn(a, b, c):
			...
		fn(1,2,3)
	关键字参数:
		def fn(a, b, c):
			...
		fn(a=100, c=200, b=300)
	不定长参数:
		def fn(*args):
			print(args) #包裹位置传递，打印出来的是所有传入的位置参数
		def fn(**kwargs):
			print(kwargs) #包裹关键字传递，打印出来的是所有传入的关键字参数

内置高阶函数：
	map(fun, [1,2,3]) #将传入的函数作用到列表的每一个数据中，返回一个迭代器
	filter(fun, [1,2,3]) #将符合条件的元素组成迭代器返回

文件操作：
	f=open(name, mode, encoding="utf-8") 
		f是文件对象
		打开文件操作 
		name文件路径 mode打开文件的模式
		打开方式（访问模式）
			主访问模式(基本的)：
				只读 r (默认的)
					文件不存在会报错
					不能写入
					文件指针在文件开头
				只写 w 
					文件不存在会创建一个
					写入会覆盖原数据
					文件指针在文件结尾
				追加 a
					文件不存在会创建一个
					写入会追加原数据
					文件指针在文件结尾
			文件指针：类似于光标，读取和写入文件的位置
	f.wirte("abc")
		写入数据
	f.close()
		关闭文件
	f.seek(偏移的字节数， 起始位置)
		移动文件指针位置
		起始位置：
			0 文件开头
			1 当前位置
			2 文件结尾
	f.read()
		读取文件数据，参数可以写读取的长度（字节）
文件和文件夹的其他操作需要借助os模块
	import os #引入os模块
	os.rename(目标文件名, 新文件名)
		文件/文件夹重命名
	os.remove(文件名)
		删除文件
	os.mkdir(目录名)
		创建文件夹
	os.rmdir(目录名)
		删除文件夹
	os.getcwd()
		获取当前目录(当前文件所在目录)路径
	os.chdir()
		改变默认目录
	os.listdir()
		获取目录中文件列表(可以指定目录，不指定就是默认的)

面向对象：
	定义类：
	class 类名():
		def 方法名(this):
			#this是实例化的对象
			print("123")
	定理对象：obj=类名()
	魔法方法：
		__xx__() 这样的方法就是魔法对象
		__init__(this, c1, c2) 
			初始化对象（构造器）
			对象创建的时候自动调用
		__str__()
			使用print打印的数据（用返回）
		__del__()
			删除对象时调用的方法
	继承：
		所有类默认都继承object基类
	单继承：
		class A():
			def __init__(this, name):
				this.name=name
		class B(A):
			pass
	多继承：
		class A():
			def __init__(this, name):
				this.name=name
		class B(A):
			def __init__(this, name):
				this.name=name
		class C(A, B):
			pass
		如果多个父类有同名属性或方法，默认使用第一个类的
	查看类继承的层级关系
		A.__mro__
	使用父类的方法和属性
		class C(A, B):
			def useParent(this):
				A.__init__(this)
				A.abc(this)
		#如果调用的是第一个父类，直接用super()调用（方法不用传this）
	私有属性和方法：
		this.__money=10000000
	类属性：
		class A():
			name="gkk"
		#类属性只能通过类修改，如果通过实例修改会增加一个同名的实例属性，不会修改类属性
		#类属性可以在类和所有实例中访问，只占用一块内存
	类方法：
		class A()
			@classmethod
			def getMoney(self):
				return self.__money;
		#需要使用类的调用方法时，可以定义类方法
	静态方法：
		class A():
			@staticmethod
			def print_info():
				print("hello")
		#不需要类或实例调用的方法可以定义为静态方法

异常：
捕获所有异常类型：
	try:
		print(num)
	except Exception as info:
		#info是异常的信息
		print(info)
	else:
		#这里是没有捕获异常执行的代码
		pass
	finally:
		#无论是否有异常都执行的代码
		pass
捕获指定异常类型：
	try:
		print(num)
	except NameError as info:
		#info是异常的信息
		print(info)
	#尝试执行的代码的异常类型和捕获的不一样就不会捕获
	#一般try下只放一行代码
捕获指定多个异常类型：
	try:
		print(num)
	except (NameError,ZeroDivisionError) as info:
		#info是异常的信息
		print(info)
自定义异常类:
	class Abc(Exception):
		def __str__():
			return "出了什么错误。。。"
抛出异常：
	raise Abc()

导入模块：
	import XXX
	#可以定义别名
	import XXX as xxx
导入模块的方法
	from XXX import fn1,fn2
	#定义别名
	from XXX import fn1 as f1,fn2 as f2

__name__是一个系统变量，如果执行代码是当前文件，值就是"__main__"，如果是以模块方式执行的，值就是模块的名字

包：一组有联系的模块，放到同一个文件夹下
导入包和使用包：
方法一：
	import 包名.模块名
	包名.模块名.函数
方法二：
	from 包名 import *
	#导入所有模块，可以在包中__init__.py中设置__all__列表控制导入的模块
	#__all__ = ["m1", "m2"]
	模块名.函数
	

